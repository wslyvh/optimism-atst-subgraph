// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AttestationCreated extends ethereum.Event {
  get params(): AttestationCreated__Params {
    return new AttestationCreated__Params(this);
  }
}

export class AttestationCreated__Params {
  _event: AttestationCreated;

  constructor(event: AttestationCreated) {
    this._event = event;
  }

  get creator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get about(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get key(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get val(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }
}

export class AttestationStation extends ethereum.SmartContract {
  static bind(address: Address): AttestationStation {
    return new AttestationStation("AttestationStation", address);
  }

  attestations(param0: Address, param1: Address, param2: Bytes): Bytes {
    let result = super.call(
      "attestations",
      "attestations(address,address,bytes32):(bytes)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromFixedBytes(param2)
      ]
    );

    return result[0].toBytes();
  }

  try_attestations(
    param0: Address,
    param1: Address,
    param2: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "attestations",
      "attestations(address,address,bytes32):(bytes)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromFixedBytes(param2)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  version(): string {
    let result = super.call("version", "version():(string)", []);

    return result[0].toString();
  }

  try_version(): ethereum.CallResult<string> {
    let result = super.tryCall("version", "version():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AttestCall extends ethereum.Call {
  get inputs(): AttestCall__Inputs {
    return new AttestCall__Inputs(this);
  }

  get outputs(): AttestCall__Outputs {
    return new AttestCall__Outputs(this);
  }
}

export class AttestCall__Inputs {
  _call: AttestCall;

  constructor(call: AttestCall) {
    this._call = call;
  }

  get _attestations(): Array<AttestCall_attestationsStruct> {
    return this._call.inputValues[0].value.toTupleArray<
      AttestCall_attestationsStruct
    >();
  }
}

export class AttestCall__Outputs {
  _call: AttestCall;

  constructor(call: AttestCall) {
    this._call = call;
  }
}

export class AttestCall_attestationsStruct extends ethereum.Tuple {
  get about(): Address {
    return this[0].toAddress();
  }

  get key(): Bytes {
    return this[1].toBytes();
  }

  get val(): Bytes {
    return this[2].toBytes();
  }
}

export class Attest1Call extends ethereum.Call {
  get inputs(): Attest1Call__Inputs {
    return new Attest1Call__Inputs(this);
  }

  get outputs(): Attest1Call__Outputs {
    return new Attest1Call__Outputs(this);
  }
}

export class Attest1Call__Inputs {
  _call: Attest1Call;

  constructor(call: Attest1Call) {
    this._call = call;
  }

  get _about(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _key(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get _val(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class Attest1Call__Outputs {
  _call: Attest1Call;

  constructor(call: Attest1Call) {
    this._call = call;
  }
}
